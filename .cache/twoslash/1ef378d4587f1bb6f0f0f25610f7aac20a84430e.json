{"code":"import { SendMessageRequest } from 'aws-sdk/clients/sqs'\n\nasync function handler() {\n  const key = await sendMessage({\n    QueueUrl: \"https://sqs.us-east-1.amazonaws.com/123456789012/my-queue\",\n      MessageBody: JSON.stringify({\n        id: \"12345\",\n        type: \"my-message-type\",\n        data: {\n          foo: \"bar\"\n        }\n      })\n    }, {\n      name: 'my-message-data',\n    })\n}\n","extension":"ts","highlights":[],"queries":[],"staticQuickInfos":[{"text":"(alias) interface SendMessageRequest\nimport SendMessageRequest","docs":"","start":9,"length":18,"line":0,"character":9,"targetString":"SendMessageRequest"},{"text":"function handler(): Promise<void>","docs":"","start":73,"length":7,"line":2,"character":15,"targetString":"handler"},{"text":"const key: {\n    pKey: string;\n    rKey: string;\n}","docs":"","start":93,"length":3,"line":3,"character":8,"targetString":"key"},{"text":"function sendMessage<{\n    name: string;\n}, any>(messageParams: SendMessageRequest, meta?: {\n    name: string;\n} | undefined): Promise<{\n    pKey: string;\n    rKey: string;\n}>","docs":"","start":105,"length":11,"line":3,"character":20,"targetString":"sendMessage"},{"text":"(property) SQS.SendMessageRequest.QueueUrl: string","docs":"The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.","start":123,"length":8,"line":4,"character":4,"targetString":"QueueUrl"},{"text":"(property) SQS.SendMessageRequest.MessageBody: string","docs":"The message to send. The minimum size is one character. The maximum size is 256 KB.  A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:  #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF  Any characters not included in this list will be rejected. For more information, see the W3C specification for characters.","start":200,"length":11,"line":5,"character":6,"targetString":"MessageBody"},{"text":"var JSON: JSON","docs":"An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.","start":213,"length":4,"line":5,"character":19,"targetString":"JSON"},{"text":"(method) JSON.stringify(value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined): string (+1 overload)","docs":"Converts a JavaScript value to a JavaScript Object Notation (JSON) string.","start":218,"length":9,"line":5,"character":24,"targetString":"stringify"},{"text":"(property) id: string","docs":"","start":238,"length":2,"line":6,"character":8,"targetString":"id"},{"text":"(property) type: string","docs":"","start":259,"length":4,"line":7,"character":8,"targetString":"type"},{"text":"(property) data: {\n    foo: string;\n}","docs":"","start":292,"length":4,"line":8,"character":8,"targetString":"data"},{"text":"(property) foo: string","docs":"","start":310,"length":3,"line":9,"character":10,"targetString":"foo"},{"text":"(property) name: string","docs":"","start":355,"length":4,"line":13,"character":6,"targetString":"name"}],"errors":[],"playgroundURL":"https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAbzgZQIrIKIDcCmA7GAGhXQCUcBjaAEzgF84AzKCEOAIgEMB3AZwFoANpxAAjap3YBuAFA4AHpFhxOvAJ54KTAK6aYwCHji981ALI5evTgHMcAHgsxOcALwq8a4gCEI1NW4eagB8ABQgltZ2AAqcUCK8AFwophZWtjjkAI7alkRwEc4A-MlOnACUiHAycHBUeLzwYADSOAHuAOQR6XYAktQdNXWGjXBQre1wXZEZ-YO1UDgw2lBGSC1txONt9DJ0MgD0B3D8pxTaMKf8MqBK8EjIqTN22bmjDMysUzwCvNQA1gcKIJgPgYLwDrwsrxBjJVBotIxdBR9IY4AALTh4aiCHBQUKVBBDeqjf47dw8TjAeAmbFpKI4UJE2q1VC5XIAVSggmS7HRMBgYCSRyhvAAdNoBDhVJcAIxikScABehh+YqoIAOsoATABmAAsAFYAGwAdgAHABOAAMOoOIDU-ByOFy7EIQxZcHpGV8-mSAClkAB5AByYsaUGAeBswEYaiZHs9cGA1F5OoNhrdic9MDUYBwvId-G6DP4ufzWaTLIkzmSzKrLMYEAgvNEcXY2ZZ+yrdHKiboxHrnrwIgLUyLJYy-BrnA67s9vb2MiAA","tags":[]}