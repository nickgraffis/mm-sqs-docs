{"code":"import AWS from 'aws-sdk'\n\n// Send a message\nnew AWS.SQS().sendMessage(messageParams).promise()\n\n// Send batch messages\nnew AWS.SQS().sendMessageBatch(messageParams).promise()","extension":"ts","highlights":[],"queries":[],"staticQuickInfos":[{"text":"import AWS","docs":"","start":7,"length":3,"line":0,"character":7,"targetString":"AWS"},{"text":"import AWS","docs":"","start":49,"length":3,"line":3,"character":4,"targetString":"AWS"},{"text":"(alias) new SQS(options?: AWS.SQS.ClientConfiguration | undefined): AWS.SQS\nimport SQS = require('./sqs')","docs":"Constructs a service object. This object has one method for each API operation.","start":53,"length":3,"line":3,"character":8,"targetString":"SQS"},{"text":"(method) SQS.sendMessage(params: SendMessageRequest, callback?: ((err: AWS.AWSError, data: AWS.SQS.SendMessageResult) => void) | undefined): AWS.Request<AWS.SQS.SendMessageResult, AWS.AWSError> (+1 overload)","docs":"Delivers a message to the specified queue.  A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:  #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF  Any characters not included in this list will be rejected. For more information, see the W3C specification for characters.","start":59,"length":11,"line":3,"character":14,"targetString":"sendMessage"},{"text":"const messageParams: SendMessageRequest","docs":"","start":71,"length":13,"line":3,"character":26,"targetString":"messageParams"},{"text":"(method) Request<SQS.SendMessageResult, AWSError>.promise(): Promise<PromiseResult<AWS.SQS.SendMessageResult, AWS.AWSError>>","docs":"Returns a 'thenable' promise.","start":86,"length":7,"line":3,"character":41,"targetString":"promise"},{"text":"import AWS","docs":"","start":124,"length":3,"line":6,"character":4,"targetString":"AWS"},{"text":"(alias) new SQS(options?: AWS.SQS.ClientConfiguration | undefined): AWS.SQS\nimport SQS = require('./sqs')","docs":"Constructs a service object. This object has one method for each API operation.","start":128,"length":3,"line":6,"character":8,"targetString":"SQS"},{"text":"(method) SQS.sendMessageBatch(params: SendMessageBatchRequest, callback?: ((err: AWS.AWSError, data: AWS.SQS.SendMessageBatchResult) => void) | undefined): AWS.Request<AWS.SQS.SendMessageBatchResult, AWS.AWSError> (+1 overload)","docs":"Delivers up to ten messages to the specified queue. This is a batch version of  SendMessage. For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent. The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of 200. The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes).  A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:  #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF  Any characters not included in this list will be rejected. For more information, see the W3C specification for characters.  If you don't specify the DelaySeconds parameter for an entry, Amazon SQS uses the default value for the queue. Some actions take lists of parameters. These lists are specified using the param.n notation. Values of n are integers starting from 1. For example, a parameter list with two elements looks like this:  &amp;AttributeName.1=first   &amp;AttributeName.2=second","start":134,"length":16,"line":6,"character":14,"targetString":"sendMessageBatch"},{"text":"const messageParams: SendMessageRequest","docs":"","start":151,"length":13,"line":6,"character":31,"targetString":"messageParams"},{"text":"(method) Request<SQS.SendMessageBatchResult, AWSError>.promise(): Promise<PromiseResult<AWS.SQS.SendMessageBatchResult, AWS.AWSError>>","docs":"Returns a 'thenable' promise.","start":166,"length":7,"line":6,"character":46,"targetString":"promise"}],"errors":[{"category":1,"code":2769,"length":13,"start":151,"line":6,"character":31,"renderedMessage":"No overload matches this call.\n  Overload 1 of 2, '(params: SendMessageBatchRequest, callback?: ((err: AWSError, data: SendMessageBatchResult) => void) | undefined): Request<...>', gave the following error.\n    Argument of type 'SendMessageRequest' is not assignable to parameter of type 'SendMessageBatchRequest'.\n      Property 'Entries' is missing in type 'SendMessageRequest' but required in type 'SendMessageBatchRequest'.\n  Overload 2 of 2, '(callback?: ((err: AWSError, data: SendMessageBatchResult) => void) | undefined): Request<SendMessageBatchResult, AWSError>', gave the following error.\n    Argument of type 'SendMessageRequest' is not assignable to parameter of type '(err: AWSError, data: SendMessageBatchResult) => void'.\n      Type 'SendMessageRequest' provides no match for the signature '(err: AWSError, data: SendMessageBatchResult): void'.","id":"err-2769-808-13"}],"playgroundURL":"https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYBsBOAUAJYC2ADggC6gDeoAypAHYAmAspIogIYDmkASpACOAV3bkANHUat2XXgCFO5AMYALASLGgAvqABm8IqADknAO6IAtIiYBrYMoA2BRuUTBEgxMbx5lcBkRKIlkeSAAFTmhOIhQpZjYOMI1RINAAXmo8UFAARVFRAFVoR1QAIlVychIUEE9EADphK0hOIMsARgaYzgAvAPNG-yJgDrQAZgAWAFYsDAAOHAAGMeAiAE9LTVEy8WzQRLlIeTgmddQAKVoAeQA5BqDoAgZuAj11gAoqfZyCJnKxlNprsfqByOsSJByhtLCEkrxLODISCcjkmEpOKhvqjUXo4HBygAjKJlUHafbaACUeHJfgCaWJKlUhzCkWisVQ9ASoQUSjUKS0mWxeQKkGKpVAFSqNWQdS8TRabXInW6RD6AwsDWGowmMzmixWaDWm22kBRoAAogxyE92KgANqg4U4gCS-xMACs9LYmI5jHscTkWQpTudQFc7g8bc9Xu8vqCcX8AbrgQHAzkkVDJTC4UdERCzWn0+jyJisumcXiCZLidBSRWdAmdNSceScgBdGl4ECgSx95TCZV9wikCigACCAHVaPpDCZBtY7D5u2AuUxQJxQLmwngGJAzBPpw1aLlaB9KQ9pMHIB9t7w2TFEBeSIYCIgb9SV-F14y1Fueewu77oetDHqe56Xty8LHHyqi3gBD6xM+r7vueQA","tags":[]}