{"code":"\nasync function handler() {\n  const key = await sendMessageBatch({\n    QueueUrl: \"https://sqs.us-east-1.amazonaws.com/123456789012/my-queue\",\n    Entries: [\n      {\n        Id: \"1\",\n        MessageBody: JSON.stringify({\n        id: \"12345\",\n        type: \"my-message-type\",\n          data: {\n            foo: \"bar\"\n          }\n        })\n      }\n    ]\n    }, {\n      name: 'my-message-data',\n    })\n}\n","extension":"ts","highlights":[],"queries":[],"staticQuickInfos":[{"text":"function handler(): Promise<void>","docs":"","start":16,"length":7,"line":1,"character":15,"targetString":"handler"},{"text":"const key: {\n    pKey: string;\n    rKey: string;\n}[]","docs":"","start":36,"length":3,"line":2,"character":8,"targetString":"key"},{"text":"function sendMessageBatch<{\n    name: string;\n}, any>(messageParams: SendMessageBatchRequest, meta?: {\n    name: string;\n} | undefined): Promise<{\n    pKey: string;\n    rKey: string;\n}[]>","docs":"","start":48,"length":16,"line":2,"character":20,"targetString":"sendMessageBatch"},{"text":"(property) SQS.SendMessageBatchRequest.QueueUrl: string","docs":"The URL of the Amazon SQS queue to which batched messages are sent. Queue URLs and names are case-sensitive.","start":71,"length":8,"line":3,"character":4,"targetString":"QueueUrl"},{"text":"(property) SQS.SendMessageBatchRequest.Entries: SQS.SendMessageBatchRequestEntryList","docs":"A list of  SendMessageBatchRequestEntry  items.","start":146,"length":7,"line":4,"character":4,"targetString":"Entries"},{"text":"(property) SQS.SendMessageBatchRequestEntry.Id: string","docs":"An identifier for a message in this batch used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).","start":173,"length":2,"line":6,"character":8,"targetString":"Id"},{"text":"(property) SQS.SendMessageBatchRequestEntry.MessageBody: string","docs":"The body of the message.","start":190,"length":11,"line":7,"character":8,"targetString":"MessageBody"},{"text":"var JSON: JSON","docs":"An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.","start":203,"length":4,"line":7,"character":21,"targetString":"JSON"},{"text":"(method) JSON.stringify(value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined): string (+1 overload)","docs":"Converts a JavaScript value to a JavaScript Object Notation (JSON) string.","start":208,"length":9,"line":7,"character":26,"targetString":"stringify"},{"text":"(property) id: string","docs":"","start":228,"length":2,"line":8,"character":8,"targetString":"id"},{"text":"(property) type: string","docs":"","start":249,"length":4,"line":9,"character":8,"targetString":"type"},{"text":"(property) data: {\n    foo: string;\n}","docs":"","start":284,"length":4,"line":10,"character":10,"targetString":"data"},{"text":"(property) foo: string","docs":"","start":304,"length":3,"line":11,"character":12,"targetString":"foo"},{"text":"(property) name: string","docs":"","start":367,"length":4,"line":17,"character":6,"targetString":"name"}],"errors":[],"playgroundURL":"https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAbzgZQKYDsAmBZVBnPAQwHNUAhQmAYwAsAlVARwFd94BfOAMyghDgDkhAO54AtHkwBrAPRUANsAww8MvIzwCAUKgAekWHEJ4Anuirdm5mMAjo4eDDnxFSFajQA8uGITgBeI3QTABo4MghMEwCgkwA+AAoQFxJUAAVCKEIQPAAuFCdcAlT3WgYWNjDk3wB+fJ9CAEpELTg4Kjs8eDAAaVRowIFk4tIASUxtNo70LrgoPoHBYddUccm51BhmKHsAbSRe-rD5-rh2AF0tdi0ZGTgxB6pmGAexLS1jMwsuKyobOzgNEIWHkqCgCWaCFa7U68Ckp0CIkIwHgjiwRRWpRoCShbTaAEVWKwAKpQeT5ABENBgMDAeVu6jwADpmOJUMYXgBGJnZQgALzsImZHRAMk5ACYAMwAFgArAA2ADsAA4AJwABglMhAJjEFVYFJC0LaAFF0DAoEo8nBdsa8bi8Y7xpTOYa7Y6MSVIiZ8gApZAAeQAckyupb0MRgFwTDj3XjgJgXVK5W7HY6YCYwKhKTqxMtUmIM1nU2nHZhKIR8g7S46uBAIJSAEaZClxx3XGtnRpxjt4y7tsLVvHobLZpa6-OkMTl3wCI3t7vXIA","tags":[]}