{"code":"type Body = {\n  data: string,\n  moreData: number\n}\n\ntype MetaData = {\n  stuff: string\n}\n\nasync function processMessage(record: SQSRecord) {\n  const { id, body, url, getMessageRecord } = \n    readSQSRecord<Body, MetaData>(record)\n  \n  await markComplete(record)\n}\n","extension":"ts","highlights":[],"queries":[],"staticQuickInfos":[{"text":"type Body = {\n    data: string;\n    moreData: number;\n}","docs":"","start":5,"length":4,"line":0,"character":5,"targetString":"Body"},{"text":"(property) data: string","docs":"","start":16,"length":4,"line":1,"character":2,"targetString":"data"},{"text":"(property) moreData: number","docs":"","start":32,"length":8,"line":2,"character":2,"targetString":"moreData"},{"text":"type MetaData = {\n    stuff: string;\n}","docs":"","start":57,"length":8,"line":5,"character":5,"targetString":"MetaData"},{"text":"(property) stuff: string","docs":"","start":72,"length":5,"line":6,"character":2,"targetString":"stuff"},{"text":"function processMessage(record: SQSRecord): Promise<void>","docs":"","start":104,"length":14,"line":9,"character":15,"targetString":"processMessage"},{"text":"(parameter) record: SQSRecord","docs":"","start":119,"length":6,"line":9,"character":30,"targetString":"record"},{"text":"(alias) interface SQSRecord\nimport SQSRecord","docs":"","start":127,"length":9,"line":9,"character":38,"targetString":"SQSRecord"},{"text":"const id: string | undefined","docs":"","start":150,"length":2,"line":10,"character":10,"targetString":"id"},{"text":"const body: Body","docs":"","start":154,"length":4,"line":10,"character":14,"targetString":"body"},{"text":"const url: string","docs":"","start":160,"length":3,"line":10,"character":20,"targetString":"url"},{"text":"const getMessageRecord: (consistentRead?: boolean | undefined) => Promise<MessageRecord<MetaData, any>>","docs":"","start":165,"length":16,"line":10,"character":25,"targetString":"getMessageRecord"},{"text":"function readSQSRecord<Body, MetaData, any>(record: SQSRecord): Response<MetaData, any, Body>","docs":"Parse the SQS record to gain access to helpful meta data and getters","start":191,"length":13,"line":11,"character":4,"targetString":"readSQSRecord"},{"text":"type Body = {\n    data: string;\n    moreData: number;\n}","docs":"","start":205,"length":4,"line":11,"character":18,"targetString":"Body"},{"text":"type MetaData = {\n    stuff: string;\n}","docs":"","start":211,"length":8,"line":11,"character":24,"targetString":"MetaData"},{"text":"(parameter) record: SQSRecord","docs":"","start":221,"length":6,"line":11,"character":34,"targetString":"record"},{"text":"function markComplete(record: SQSRecord): Promise<{\n    pKey: string;\n    rKey: string;\n}>","docs":"","start":240,"length":12,"line":13,"character":8,"targetString":"markComplete"},{"text":"(parameter) record: SQSRecord","docs":"","start":253,"length":6,"line":13,"character":21,"targetString":"record"}],"errors":[],"playgroundURL":"https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAbzgZQIrIEoFMDG0AmcAvnAGZQQhwDkAhgO4DOAtADa0gBG+t1AUFgAekWHBgBPMFhToAslkaNaAcywBpLOLgBeOAAM0yeYpVYAJGYSMYUYADtlRPXz75c7KNJztFKG-eVgUmAsfAAeABUAPjghGCw7fEY-WwdEPjg4MFsAN1p4uAB9YutUwODQgC44CL4iF3t4qFJaHGkAKWQAeQA5dMzSgKDxSKiACgzMuDzWAFcsaoiAGknMzzB2NqgAfmqxgGtNasGHJenaOYW4WjtxAEodGJvxFam4RjBWrF33-zSAHzgdlmXCwUEmd2Of2UcAAZCkhhVwtFJp8oIwsKMxvFBDBqshoUEQsiomdPDlgDkwT8DkdrrczjN5tVng9tE9bpCaqjaOisNi4lCymSsBSqTs9odxCyGedLjL7o96fcFXUXEIRPAEiC4Ng8FB8BFJNIEJNvLNrGCdDRzZaoNRXmJaIx9tbqDBnfsHZMQAolKo3b6TKp+PUBMJoFrgVQCfkLf0sp4AGKsYDKAAW8F01AAChgAKJwJMAGQAkgBxAASEW9mXsOYoyk8vmzpb6ea65YLyGQtbgeHArCwBWzAGEurIc8X8xF832wRQoG78xgMF0MKH1RHRNqYx6YBbRxA3AnslgU2nM9aAAyO+uN5vJXQARmvt7NlA2w+kugATG-HQXaBrQAFgAyZrAgMApEIXQAFY3zVcNNTEY04GMf0sD1AgwnkD1rWeM4ACFjy0XRnhiXRTUyMANGlGQjD9Uw6MmKA6PxOQmNUFi63wIUAkmWYoFYfiHB9YdaB+PDaEmThSPxaE4QRBwiVCMISPwcQokmCQpGqbCDSNKQII9WBQgAQTxX4yhMuNGAUuzbIPRgjzcBznNcrAP0Hb98Es0SYUBYFWFYQSwB4eI-Ksk5lEmDVgGbfzrIEzI8DsRgQRgYAIDsQo8FmOwrOjTgwTiqBFx+Z4AG0AF01Q1SNrkYcQ7BwMgCpwLKcrgWZwvyLAMNMAzwmkgjZQ0sjlXGSYpWqJBaLpGKAG44DYxbFKIR1PH1Pj0K4rDcBw6SYkBMYxm2ghqkG1RhtwiTiNIqI2Ria6Dp2u6PQezSnpWLkG0oYAMTCeb2OShwVrW+iYuIGIkE8A8oDsRAslB6gHVW1HqGIYgXD4XTpGwD4cqB0byNlctWAgTgLifZUvsmijrWonrhIC1FQcMV6eIxulOf27mPRdH4YsmYB8GF6FZPkuAJp0419MOwzjUmVQYFe4a9jSxhAfiQrsFocXqjkiAhxuZ64H+kBAcxdXFZGiSom0sMAHoACpXYyV2Ld5DExHTaRDFWu2xAgOBlFoexrhwNpfBgUP-dYMBSFmVg4F9fCItoelCFVppGE9uAAAE0Q4WIqUKuBmBqf2GKDnaQ6yH2vLgL3C-hoT0ur6Rqe1tr06zzOyGAmAa6DTDs7D4c86HpdlEp6nWGSG5CAug1Pedvhk9arqkc8A3DFuiaxpePb8LJk+Kapmnj-GVfdoPu2uUJyB0pt+64EvhfGHp2GP3S+A5KaQVNaTovQAB0aIMTnTtmAwB9w-7WBZqnbMAArUg+x8DsCWqQfgqVibwAWpNAwnFFCYQsAgagpB8BUNoDQ6gTgmoMS5poBB8AxZujQRg9gpAUEYIuEtXB-Z8E8yIXzUhphyHUE4Zg2g2DeE8HoXoRhYjMLcy1vAQWrpdAFTcMEOwoRWGoSkNaYaRksBgLHqYOA-xASmONGA20TRWLDg7gmTIQlWCOhonRLxIjfGaN8XA-xxpfFi2qHfCx+1Sz4F8arW2O1NbEx1gkfWsEyA0ywM9VYUwxjOham1D6tBxjmzGMzN43jNC+LeJDKpUwxa1PccJBpacJJG1IpEz62S3hwLaZpWBpFmn42adYXkkUkpwLASMsyUVhn7gtL08Qky5nfy6VMEZHljxXAmesw8mzmkDi-GMqyEyDlDiOc03qEULLHPaZc-qMzVmZHiolG5fTnkKEsvs4mmVsq5XyoVBZDjvkgB3nlCABUYDNKAlAQF0LVlEDuHcMYdxHT1DDA1UQeTWrtW3r8tOvJ9hHh8vEaBCSGLDT+hQK2QMQbrTKBDUG0MiC-zWC4xGyNCHVDRmSTGON6jO2dpXZgzAcCzBgMK5geM0JHyopMTOAVHQgGgFgAAIvkWg1RiqlTDPjU+tA1VnwTNYWYpBSBszDFitqW9Op4uyBAGOjBXqksuuSx+CZ1HI3qXAIJSCzhxP2sNbGuhsl73wA-d6E0zjSQNUU51Bo7iTEmAwCO8AQAEqJYc-kd8E31CAA","tags":[]}