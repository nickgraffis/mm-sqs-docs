{"code":"\ntype Body = {\n  data: string,\n  moreData: number\n}\n\ntype MetaData = {\n  stuff: string\n}\n\nasync function processMessage(record: SQSRecord) {\n  const { id, body, getMessageRecord, getMessageCluster } = \n    readSQSRecord<Body, MetaData>(record)\n  \n  const messageRecord = await getMessageRecord()\n\n  // const messageCluster = await getMessageCluster()\n}\n","extension":"ts","highlights":[],"queries":[],"staticQuickInfos":[{"text":"type Body = {\n    data: string;\n    moreData: number;\n}","docs":"","start":6,"length":4,"line":1,"character":5,"targetString":"Body"},{"text":"(property) data: string","docs":"","start":17,"length":4,"line":2,"character":2,"targetString":"data"},{"text":"(property) moreData: number","docs":"","start":33,"length":8,"line":3,"character":2,"targetString":"moreData"},{"text":"type MetaData = {\n    stuff: string;\n}","docs":"","start":58,"length":8,"line":6,"character":5,"targetString":"MetaData"},{"text":"(property) stuff: string","docs":"","start":73,"length":5,"line":7,"character":2,"targetString":"stuff"},{"text":"function processMessage(record: SQSRecord): Promise<void>","docs":"","start":105,"length":14,"line":10,"character":15,"targetString":"processMessage"},{"text":"(parameter) record: SQSRecord","docs":"","start":120,"length":6,"line":10,"character":30,"targetString":"record"},{"text":"(alias) interface SQSRecord\nimport SQSRecord","docs":"","start":128,"length":9,"line":10,"character":38,"targetString":"SQSRecord"},{"text":"const id: string | undefined","docs":"","start":151,"length":2,"line":11,"character":10,"targetString":"id"},{"text":"const body: Body","docs":"","start":155,"length":4,"line":11,"character":14,"targetString":"body"},{"text":"const getMessageRecord: (consistentRead?: boolean | undefined) => Promise<MessageRecord<MetaData, any>>","docs":"","start":161,"length":16,"line":11,"character":20,"targetString":"getMessageRecord"},{"text":"const getMessageCluster: ((consistentRead?: boolean | undefined) => Promise<{\n    record: MessageClusterRecord<MetaData, any>;\n    getGlobals: () => Promise<any>;\n}>) | undefined","docs":"","start":179,"length":17,"line":11,"character":38,"targetString":"getMessageCluster"},{"text":"function readSQSRecord<Body, MetaData, any>(record: SQSRecord): Response<MetaData, any, Body>","docs":"Parse the SQS record to gain access to helpful meta data and getters","start":206,"length":13,"line":12,"character":4,"targetString":"readSQSRecord"},{"text":"type Body = {\n    data: string;\n    moreData: number;\n}","docs":"","start":220,"length":4,"line":12,"character":18,"targetString":"Body"},{"text":"type MetaData = {\n    stuff: string;\n}","docs":"","start":226,"length":8,"line":12,"character":24,"targetString":"MetaData"},{"text":"(parameter) record: SQSRecord","docs":"","start":236,"length":6,"line":12,"character":34,"targetString":"record"},{"text":"const messageRecord: MessageRecord<MetaData, any>","docs":"","start":255,"length":13,"line":14,"character":8,"targetString":"messageRecord"},{"text":"const getMessageRecord: (consistentRead?: boolean | undefined) => Promise<MessageRecord<MetaData, any>>","docs":"","start":277,"length":16,"line":14,"character":30,"targetString":"getMessageRecord"}],"errors":[],"playgroundURL":"https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAbzgZQIrIEoFMDG0AmcAvnAGZQQhwDkAhgO4DOAtADa0gBG+t1AUKEiw4AQQDqyMhSp0mzRvgDW-PlgAeQ+DACeYLCnQBZLI0a0A5lgDSWbXAC8cAAZpkx0xawASLwkYwoYAA7cyInPj58XHYofRx2UxQA4PNgUmAsfAAeABUAPjh1GCwg-EYkwJDEPjg4MECAN1piuAB9dv9K1PTMgC44HL4iCODiqFJaHH0AKWQAeQA5atrOlLTtXLyAChrauCbWAFcsfpyAGl3a2LB2KagAfn6txVt+1ZCz-dojk7haIO0AEoHAV-toLns4IwwJMsI8ockqgAfOBBQ5cLBQXaAt6I8xwABkFTWPWy+V2MKgjCwmy2xTUMH6yDxaQyZLyn1iDWADUx8Oerz+AM+B2O-TBwPsoIBOIGFNoVKwdKKuK6nKw3N5DyeL204uFXx++qBIKFQONQwi6k0cB0ejg7jMlgAwkd-JjsHgoNljDBaA4zZ8crRGIpff7HGCCo4ELs7b9PQQcrosLtDlBWKqUhSbHqDG4TE7rLZdlBc0yjIXPLndv5modGEy-TAG7tMRRtWaANoAXVrzYbzogUSb9cYQ6i-YVxXwIkZCK6uzw4FYWBnc6zyNRh1YrCXlBua8ywdDjYGIcUuQv4byvd2wWXh+KJ8UZ5fV9DN7vtU4hxwLxgAAFBUODPWNIQAIT-ADN3MS44HLBds1qYZahANdaHhcM0zAHh13nd44Nqa1gFiRgNyQkJLVUDRoC0FMHSrSxE29LJwwDMFPgg4c7EjAFo2WOpENcR1qxLK5hMrDxLBrWpgHwWC0wzRS0IwrCMN2TgeKbLpCWJEJWUyLJuPwbQ8jjFN+hY-Bkz0KdYEyCjCKnFsz2ZMcXMHYdfnc1yJ1TWpH1XfDYLgFE0V3HC8Mcgi8TbDRSJMJy4sCiAgkYdEYGANLWjwQ4gnnNEMSxYioA7eEwTvYYaJteNz1DNiMI4-iA3AuB0L9fpsNqeN+moP1Q34OT8HhZyVgHRh4V81tqutOjCiKuBrNs-Q2viBsxgDah1vdKBqAhW0Ly2gblAO9DpP0RxqHOot+Fm2jhBKdEkjHQT6iwAAxVhgHMAALeArsAjAAFE4A+gAZABJABxAAJHJ9vvIJAIocwyPKK7IaWIG5mhkHkGQRHUpXI8tudOZDEA8HgZyYGicKMroC24GMAwOYMDuq0HvgJ6qGm8dvLe2Ivp+-6AwABgO4IUYgNHCwDABGcXJf3EmWkcAAmZWDvbJnHAAFm1-sIDAPRCEcABWZXqLq7BoTS6lGr9ZrwTgaHWAgThvgxwM4BM3izQEtr00zSiiKEwURKY4ttFLSSCwu2TDtDUaUrgeTU8XH9tL9niLL0KzcCTFMDssGBRJdN0xnheCtjwdLgHdArsFoEb+i0iBV3+SUChlkBG5pJB4KuIvvS66PXQ2j1R59DCOWHuAy-dz3vaeHu4D7gesmXr3WEYAp4KIefajLiusGsp568YRvimbrBW-hDuu6CdfN8ds-rKd2g8nM6qAHoABUACagAI3gqaktpfr6FcHAWIXpCAwAgIvWgwQ-g4CmIkRBcAoGsDAKQHc7Ump4X9P8QgZcxiMBAXAAAApSDghReQFTgMwAYUD8ywJnraJBlJqRUOobEFsUB0qsP0F7a+OBCHO2IWQJmMA2E3U8EKMha4KEyKgIvD2u9yikI4fAkBf8+D4KCDgLKaUOGt1cJ-f2LtPjsT4q7He3sXbbDgQQCsmAZ6yjtpAdKNJwyfEcXvLiPEChrQdvALSpljQBlmIsAAdDwpUrjvRxMiUCfc6V4Ahy2gAK1IIofA7AADcpAhpwCvvAMAuYAwuCkhdHwCBqCkHwM02grTqBhD+OUKOidxLlPCenc2NA8kFPYKQHJBTvhFLKRU2B1THC1ITvU3w1ARmFNoCUiZPAOlOC6fmM+SdZknQDPlKI6QgiZAyf4W0DFHDLRTHEhRlgwoonuXoOJO0xiljXOmIIglaghwOrUKptggVzNBfBE6YK0lgvjGC+S-Rkn4EedHSG+AwWn2jhfOAdcHY3xKDAFuQyJh7ywD3BeWwQzaGMXAL+2x15bDapCYFuYwWQjLBC5lex5Jsr2ICheqlOpwDSSiv0vLs5ROFTxVJPFxU3L0HKusDlZzzhFUq-CiqJrt2lXWVymqxz+W1aZOJuqvJRDlUFI8KqjXaA+QeYKMU5WHFws0GKNq4nOuiiquVJEyIURFb6pKMALUO0ytlIIuUID5VVdKq+Yacp5QKj6xmUB3W6xKsyoggJARbEBAdYY-8-7MOYMwHAhwYAluYBEOq1iYy7GIbBM60AsAABFmi0H6EVTgmIbYMXDG252dbxqHFIKQRS1UqU0qMSY8NdQKAYMYGfLYSL3HWWBGEzJiBBmfBhYvNcH8Z6fExRdSeu1iABngrECx6ArGysYn6Ad39l2eN2Fc+ATzz6cMjPQFB8Bj1FmsrmiItQ-5FtmR+09m1v2-r3eXCeVdMRAeGEAA","tags":[]}